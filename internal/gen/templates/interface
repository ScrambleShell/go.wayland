{{ template "description" .Description }}
type {{ .Name.Exported }} interface {
	Object
{{ range .Requests }}
	{{ template "docs" . -}}
	{{ .Name.Exported }}({{ template "request_arglist" .Args }}) ({{ template "returnlist" .Args }} err error)
{{ end -}}
{{- range .Events }}
	{{ template "docs" . -}}
	On{{ .Name.Exported }}(cb func({{ template "event_arglist" .Args }}))
{{ end -}}
}

{{ range $enum := .Enums }}
{{ template "description" $enum.Description -}}
type {{ $.Name.Exported }}{{ $enum.Name.Exported }} uint32

const (
	{{ range $entry := $enum.Entries }}
	// {{ $entry.Summary }}
	{{ $.Name.Exported}}{{ $enum.Name.Exported }}{{ $entry.Name.Exported }} = {{ $entry.Value }}
	{{ end }}
)

{{ if eq $enum.Name "error" }}
{{/* Make it an instance of error, using the summary as the message. */}}
func (e {{ $.Name.Exported }}Error) Error() string {
	switch e {
	{{- range $entry := $enum.Entries }}
	case {{ $entry.Value }}:
		return {{ $entry.Summary | printf "%q" }}
	{{- end }}
	default:
		return "Unknown error code"
	}
}
{{ end }}
{{ end }}


var {{ .Name.Local }}FdCounts = fdCounts {
	requests: []int{
	{{- range .Requests -}}
		{{ .Args.FdCount }},
	{{- end -}}
	},
	events: []int{
	{{- range .Events -}}
		{{ .Args.FdCount }},
	{{- end -}}
	},
}

type remote{{ .Name.Exported }} struct {
	remoteObject
	{{- range .Events }}
	on{{ .Name.Exported }} func({{ template "event_arglist" .Args }})
	{{- end -}}
}

{{- range $i, $req := .Requests }}
func (o *remote{{ $.Name.Exported }}) {{ $req.Name.Exported }}(
	{{- template "request_arglist" $req.Args }}) (
	{{- template "returnlist" $req.Args -}} err error) {
	o.conn.lock.Lock()
	defer o.conn.lock.Unlock()
	{{- range $arg := $req.Args }}
		{{- if eq $arg.Type "new_id" }}
		{{- if eq $arg.Interface "" }}
		{{ $arg.Name.Local }} = o.conn.newId()
		{{- else }}
		{{ $arg.Name.Local }} = &remote{{ $arg.Interface.Exported }}{
			remoteObject: remoteObject {
				conn: o.conn,
				id: o.conn.newId(),
			},
		}
		{{- end }}
		{{- end }}
	{{- end }}
	hdr := header{
		Sender: o.id,
		Opcode: {{ $i }},
		Size: 8 {{- range $arg := $req.Args -}}
			+ sizeOf_{{ $arg.Type }}({{ $arg.Name.Local }})
		{{- end }},
	}
	fds := []int{
	{{- range $arg := $req.Args }}
		{{- if eq $arg.Type "fd" -}}
		{{- $arg.Name.Local -}},
		{{- end -}}
	{{- end -}}
	}
	buf := bytes.NewBuffer(make([]byte, 0, hdr.Size))
	hdr.WriteTo(buf)
	{{- range $arg := $req.Args }}
		{{- if ne $arg.Type "fd" }}
		write_{{ $arg.Type }}(buf, {{ $arg.Name.Local }})
		{{- end -}}
	{{- end }}
	err = o.conn.send(buf.Bytes(), fds)
	return
}
{{ end -}}

{{- range $i, $ev := .Events }}
func (o *remote{{ $.Name.Exported }}) On{{ $ev.Name.Exported }}(cb func({{ template "event_arglist" $ev.Args }})) {
	o.on{{ $ev.Name.Exported }} = cb
}
{{ end -}}

func (o *remote{{ .Name.Exported}}) handleEvent(opcode uint16, buf []byte, fds []int) {
	switch opcode {
	{{ range $i, $ev := .Events -}}
	case {{ $i }}:
		if o.on{{ $ev.Name.Exported }} == nil {
			closeAll(fds)
			return
		}
		i := 0
		nfd := 0

		// avoid an error if the variables aren't used:
		noOpInt(i)
		noOpInt(nfd)

		{{ range $arg := $ev.Args -}}
			{{ if eq $arg.Type "fd" -}}
				{{ $arg.Name.Local }} := fds[nfd]
				nfd++
			{{ else -}}
				{{ $arg.Name.Local }}, err := read_{{ $arg.Type }}(&i, buf)
				if err != nil {
					closeAll(fds)
					return
				}
			{{ end -}}
		{{ end -}}
		o.on{{ $ev.Name.Exported }}({{ range $arg := $ev.Args -}}
			{{ if and (or (eq $arg.Type "new_id") (eq $arg.Type "object")) (ne $arg.Interface "") }}
				&remote{{ $arg.GoType }} {
					remoteObject: remoteObject {
						id: {{ $arg.Name.Local }},
						conn: o.conn,
					},
				},
			{{- else }}
			{{ $arg.Name.Local }},
			{{- end }}
		{{- end }}
		)
	{{ end }}
	}
}
