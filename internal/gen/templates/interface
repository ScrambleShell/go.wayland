{{ template "description" .Description }}
type {{ .Name.Exported }} interface {
	Object
{{ range .Requests }}
	{{ template "docs" . -}}
	{{ .Name.Exported }}({{ template "arglist" .Args }}) error
{{ end -}}
{{- range .Events }}
	{{ template "docs" . -}}
	On{{ .Name.Exported }}(cb func({{ template "arglist" .Args }})) error
{{ end -}}
}


var {{ .Name.Local }}FdCounts = fdCounts {
	requests: []int{
	{{- range .Requests -}}
		{{ .NumFdArgs }},
	{{- end -}}
	},
	events: []int{
	{{- range .Events -}}
		{{ .NumFdArgs }},
	{{- end -}}
	},
}

type {{ .Name.Local }} remoteObject

{{- range $req := .Requests }}
func (o *{{ $.Name.Local }}) {{ $req.Name.Exported }}(
	{{- template "arglist" $req.Args }}) (
	{{- template "returnlist" $req.Args }} error) {
	o.conn.lock.Lock()
	defer o.conn.lock.Unlock()
	hdr := Header{
		Sender: o.id,
		Size: 8,
	}
	{{- range $arg := $req.Args }}
		{{- if eq $arg.Type "new_id" }}
		{{ $arg.Name.Local }} := o.conn.newId()
		{{- end }}
	{{- end }}
	{{- range $arg := $req.Args }}
		hdr.Size += sizeOf_{{ $arg.Type }}({{ $arg.Name.Local }})
	{{- end }}
	buf := bytes.NewBuffer(make([]byte, 0, hdr.Size))
	hdr.WriteTo(buf)
	fds := []int{}
	{{- range $arg := $req.Args }}
		{{- if eq $arg.Type "fd" }}
		fds = append(fds, {{ $arg.Name.Local }})
		{{- else }}
		write_{{ $arg.Type }}(buf, {{ $arg.Name.Local }})
		{{- end -}}
	{{- end }}
	return o.conn.send(buf.Bytes(), fds)
}
{{ end -}}
